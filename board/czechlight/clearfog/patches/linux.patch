diff --git a/Documentation/devicetree/bindings/pinctrl/pinctrl-mcp23s08.txt b/Documentation/devicetree/bindings/pinctrl/pinctrl-mcp23s08.txt
index 2fa5edac7a35..4906544628ec 100644
--- a/Documentation/devicetree/bindings/pinctrl/pinctrl-mcp23s08.txt
+++ b/Documentation/devicetree/bindings/pinctrl/pinctrl-mcp23s08.txt
@@ -146,3 +146,38 @@ gpio21: gpio@21 {
 		bias-pull-up;
 	};
 };
+
+Line naming
+===========
+
+Because several gpio_chip instances are hidden below a single device tree
+node, it is necessary to split the names into several child nodes. Ensure
+that the configured addresses match those in the microchip,spi-present-mask:
+
+gpio@0 {
+	compatible = "microchip,mcp23s17";
+	gpio-controller;
+	#gpio-cells = <2>;
+	/* this bitmask has bits #0 (0x01) and #2 (0x04) set */
+	spi-present-mask = <0x05>;
+	reg = <0>;
+	spi-max-frequency = <1000000>;
+
+	gpio-bank@1 {
+		address = <0>;
+		gpio-line-names =
+			"GPA0",
+			"GPA1",
+			...
+			"GPA7",
+			"GPB0",
+			"GPB1",
+			...
+			"GPB7";
+	};
+
+	gpio-bank@2 {
+		address = <2>;
+		gpio-line-names = ...
+	};
+};
diff --git a/arch/arm/boot/dts/marvell/armada-388-clearfog.dtsi b/arch/arm/boot/dts/marvell/armada-388-clearfog.dtsi
index f8a06ae4a3c9..e14020e653a1 100644
--- a/arch/arm/boot/dts/marvell/armada-388-clearfog.dtsi
+++ b/arch/arm/boot/dts/marvell/armada-388-clearfog.dtsi
@@ -111,6 +111,12 @@ &eth2 {
 };
 
 &i2c0 {
+	pinctrl-0 = <&clearfog_i2c0_pins>;
+	pinctrl-1 = <&clearfog_i2c0_recovery_pins>;
+	pinctrl-names = "default", "gpio";
+	scl-gpios = <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>;
+	sda-gpios = <&gpio0 3 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>;
+
 	/*
 	 * PCA9655 GPIO expander, up to 1MHz clock.
 	 *  0-CON3 CLKREQ#
@@ -196,16 +202,32 @@ &i2c1 {
 	 */
 	clock-frequency = <100000>;
 	pinctrl-0 = <&clearfog_i2c1_pins>;
-	pinctrl-names = "default";
+	pinctrl-1 = <&clearfog_i2c1_recovery_pins>;
+	pinctrl-names = "default", "gpio";
 	status = "okay";
+	single-master;
+	scl-gpios = <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>;
+	sda-gpios = <&gpio0 27 (GPIO_ACTIVE_HIGH | GPIO_OPEN_DRAIN)>;
 };
 
 &pinctrl {
+	clearfog_i2c0_pins: i2c0-pins {
+		marvell,pins = "mpp2", "mpp3";
+		marvell,function = "i2c0";
+	};
+	clearfog_i2c0_recovery_pins: i2c0-recovery-pins {
+		marvell,pins = "mpp2", "mpp3";
+		marvell,function = "gpio";
+	};
 	clearfog_i2c1_pins: i2c1-pins {
 		/* SFP, PCIe, mSATA, mikrobus */
 		marvell,pins = "mpp26", "mpp27";
 		marvell,function = "i2c1";
 	};
+	clearfog_i2c1_recovery_pins: i2c1-recovery-pins {
+		marvell,pins = "mpp26", "mpp27";
+		marvell,function = "gpio";
+	};
 	clearfog_sdhci_cd_pins: clearfog-sdhci-cd-pins {
 		marvell,pins = "mpp20";
 		marvell,function = "gpio";
diff --git a/drivers/hwmon/pmbus/fsp-3y.c b/drivers/hwmon/pmbus/fsp-3y.c
index 72a7c261ef06..89425f4ae9fb 100644
--- a/drivers/hwmon/pmbus/fsp-3y.c
+++ b/drivers/hwmon/pmbus/fsp-3y.c
@@ -10,11 +10,12 @@
  * exposes only the values, that have been tested to work correctly. Unsupported values either
  * aren't supported by the devices or their encondings are unknown.
  */
-
+#define DEBUG
 #include <linux/delay.h>
 #include <linux/i2c.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/pmbus.h>
 #include "pmbus.h"
 
 #define YM2151_PAGE_12V_LOG	0x00
@@ -29,8 +30,8 @@
 #define YH5151E_PAGE_3V3_REAL	0x11
 
 enum chips {
-	ym2151e,
-	yh5151e
+	ym2151,
+	yh5151
 };
 
 struct fsp3y_data {
@@ -46,7 +47,7 @@ struct fsp3y_data {
 static int page_log_to_page_real(int page_log, enum chips chip)
 {
 	switch (chip) {
-	case ym2151e:
+	case ym2151:
 		switch (page_log) {
 		case YM2151_PAGE_12V_LOG:
 			return YM2151_PAGE_12V_REAL;
@@ -54,7 +55,7 @@ static int page_log_to_page_real(int page_log, enum chips chip)
 			return YM2151_PAGE_5VSB_REAL;
 		}
 		return -EINVAL;
-	case yh5151e:
+	case yh5151:
 		switch (page_log) {
 		case YH5151E_PAGE_12V_LOG:
 			return YH5151E_PAGE_12V_REAL;
@@ -93,11 +94,10 @@ static int set_page(struct i2c_client *client, int page_log)
 		/*
 		 * Testing showed that the device has a timing issue. After
 		 * setting a page, it takes a while, before the device actually
-		 * gives the correct values from the correct page. 20 ms was
-		 * tested to be enough to not give wrong values (15 ms wasn't
-		 * enough).
+		 * gives the correct values from the correct page. 30 ms was
+		 * not enough, let's hope that 50 ms is OK.
 		 */
-		usleep_range(20000, 30000);
+		usleep_range(50000, 60000);
 	}
 
 	return 0;
@@ -110,7 +110,7 @@ static int fsp3y_read_byte_data(struct i2c_client *client, int page, int reg)
 	int rv;
 
 	/*
-	 * Inject an exponent for non-compliant YH5151-E.
+	 * Inject an exponent for non-compliant HW.
 	 */
 	if (data->vout_linear_11 && reg == PMBUS_VOUT_MODE)
 		return 0x1A;
@@ -161,7 +161,7 @@ static int fsp3y_read_word_data(struct i2c_client *client, int page, int phase,
 		return rv;
 
 	/*
-	 * Handle YH-5151E non-compliant linear11 vout voltage.
+	 * Handle non-compliant linear11 vout voltage.
 	 */
 	if (data->vout_linear_11 && reg == PMBUS_READ_VOUT)
 		rv = sign_extend32(rv, 10) & 0xffff;
@@ -170,7 +170,7 @@ static int fsp3y_read_word_data(struct i2c_client *client, int page, int phase,
 }
 
 static struct pmbus_driver_info fsp3y_info[] = {
-	[ym2151e] = {
+	[ym2151] = {
 		.pages = 2,
 		.func[YM2151_PAGE_12V_LOG] =
 			PMBUS_HAVE_VOUT | PMBUS_HAVE_IOUT |
@@ -183,7 +183,7 @@ static struct pmbus_driver_info fsp3y_info[] = {
 		.read_word_data = fsp3y_read_word_data,
 		.read_byte_data = fsp3y_read_byte_data,
 	},
-	[yh5151e] = {
+	[yh5151] = {
 		.pages = 3,
 		.func[YH5151E_PAGE_12V_LOG] =
 			PMBUS_HAVE_VOUT | PMBUS_HAVE_IOUT |
@@ -200,6 +200,10 @@ static struct pmbus_driver_info fsp3y_info[] = {
 	}
 };
 
+static struct pmbus_platform_data fsp_3y_pdata = {
+	.flags = PMBUS_SKIP_STATUS_CHECK,
+};
+
 static int fsp3y_detect(struct i2c_client *client)
 {
 	int rv;
@@ -213,9 +217,13 @@ static int fsp3y_detect(struct i2c_client *client)
 
 	if (rv == 8) {
 		if (!strcmp(buf, "YM-2151E"))
-			return ym2151e;
+			return ym2151;
+		else if (!strcmp(buf, "YM-2151F"))
+			return ym2151;
 		else if (!strcmp(buf, "YH-5151E"))
-			return yh5151e;
+			return yh5151;
+		else if (!strcmp(buf, "YH-5151F"))
+			return yh5151;
 	}
 
 	dev_err(&client->dev, "Unsupported model %.*s\n", rv, buf);
@@ -223,8 +231,10 @@ static int fsp3y_detect(struct i2c_client *client)
 }
 
 static const struct i2c_device_id fsp3y_id[] = {
-	{"ym2151e", ym2151e},
-	{"yh5151e", yh5151e},
+	{"ym2151", ym2151},
+	{"ym2151e", ym2151},
+	{"yh5151", yh5151},
+	{"yh5151e", yh5151},
 	{ }
 };
 
@@ -255,24 +265,25 @@ static int fsp3y_probe(struct i2c_client *client)
 	data->info = fsp3y_info[data->chip];
 
 	/*
-	 * YH-5151E sometimes reports vout in linear11 and sometimes in
-	 * linear16. This depends on the exact individual piece of hardware. One
-	 * YH-5151E can use linear16 and another might use linear11 instead.
+	 * Some older models report vout in linear11. That's not allowed by the
+	 * standard, but that's just how the HW works. This is not limited to 
+	 * either PSU or PDU, and I've seen this in both AC and DC PSU modules.
 	 *
-	 * The format can be recognized by reading VOUT_MODE - if it doesn't
-	 * report a valid exponent, then vout uses linear11. Otherwise, the
-	 * device is compliant and uses linear16.
+	 * When VOUT_MODE is not supported, assume the (invalid) linear11
+	 * encoding.
 	 */
 	data->vout_linear_11 = false;
-	if (data->chip == yh5151e) {
-		rv = i2c_smbus_read_byte_data(client, PMBUS_VOUT_MODE);
-		if (rv < 0)
-			return rv;
+	rv = i2c_smbus_read_byte_data(client, PMBUS_VOUT_MODE);
+	if (rv < 0)
+		return rv;
 
-		if (rv == 0xFF)
-			data->vout_linear_11 = true;
+	if (rv == 0xFF) {
+		data->vout_linear_11 = true;
+		dev_dbg(&client->dev,
+			"VOUT_MODE not supported, using non-standard \"linear_11\"\n");
 	}
 
+	client->dev.platform_data = &fsp_3y_pdata;
 	return pmbus_do_probe(client, &data->info);
 }
 
diff --git a/drivers/leds/leds-tlc591xx.c b/drivers/leds/leds-tlc591xx.c
index 945e831ef4ac..682ad60970d0 100644
--- a/drivers/leds/leds-tlc591xx.c
+++ b/drivers/leds/leds-tlc591xx.c
@@ -39,6 +39,9 @@
 
 #define ldev_to_led(c)		container_of(c, struct tlc591xx_led, ldev)
 
+#define TLC591XX_RESET_BYTE_0	0xa5
+#define TLC591XX_RESET_BYTE_1	0x5a
+
 struct tlc591xx_led {
 	bool active;
 	unsigned int led_no;
@@ -50,21 +53,25 @@ struct tlc591xx_priv {
 	struct tlc591xx_led leds[TLC591XX_MAX_LEDS];
 	struct regmap *regmap;
 	unsigned int reg_ledout_offset;
+	struct i2c_client *swrst_client;
 };
 
 struct tlc591xx {
 	unsigned int max_leds;
 	unsigned int reg_ledout_offset;
+	u8 swrst_addr;
 };
 
 static const struct tlc591xx tlc59116 = {
 	.max_leds = 16,
 	.reg_ledout_offset = 0x14,
+	.swrst_addr = 0x6b,
 };
 
 static const struct tlc591xx tlc59108 = {
 	.max_leds = 8,
 	.reg_ledout_offset = 0x0c,
+	.swrst_addr = 0x4b,
 };
 
 static int
@@ -178,6 +185,18 @@ tlc591xx_probe(struct i2c_client *client)
 
 	i2c_set_clientdata(client, priv);
 
+	priv->swrst_client = devm_i2c_new_dummy_device(dev, client->adapter, tlc591xx->swrst_addr);
+	if (IS_ERR(priv->swrst_client)) {
+		dev_info(dev, "Skipping reset: address %02x already used\n",
+				tlc591xx->swrst_addr);
+	} else {
+		err = i2c_smbus_write_byte_data(priv->swrst_client,
+				TLC591XX_RESET_BYTE_0, TLC591XX_RESET_BYTE_1);
+		if (err) {
+			dev_warn(dev, "SW reset failed\n");
+		}
+	}
+
 	err = tlc591xx_set_mode(priv->regmap, MODE2_DIM);
 	if (err < 0)
 		return err;
diff --git a/drivers/leds/trigger/Kconfig b/drivers/leds/trigger/Kconfig
index 2a57328eca20..dc6816d36d06 100644
--- a/drivers/leds/trigger/Kconfig
+++ b/drivers/leds/trigger/Kconfig
@@ -83,7 +83,6 @@ config LEDS_TRIGGER_ACTIVITY
 config LEDS_TRIGGER_GPIO
 	tristate "LED GPIO Trigger"
 	depends on GPIOLIB || COMPILE_TEST
-	depends on BROKEN
 	help
 	  This allows LEDs to be controlled by gpio events. It's good
 	  when using gpios as switches and triggering the needed LEDs
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index c38be2880efc..d8afdea21310 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -2425,11 +2425,7 @@ void igb_reset(struct igb_adapter *adapter)
 	/* Re-initialize the thermal sensor on i350 devices. */
 	if (!test_bit(__IGB_DOWN, &adapter->state)) {
 		if (mac->type == e1000_i350 && hw->bus.func == 0) {
-			/* If present, re-initialize the external thermal sensor
-			 * interface.
-			 */
-			if (adapter->ets)
-				igb_set_i2c_bb(hw);
+			igb_set_i2c_bb(hw);
 			mac->ops.init_thermal_sensor_thresh(hw);
 		}
 	}
@@ -3184,6 +3180,7 @@ static s32 igb_init_i2c(struct igb_adapter *adapter)
 	 * This bus will use the i2c_algo_bit structure that implements
 	 * the protocol through toggling of the 4 bits in the register.
 	 */
+	igb_set_i2c_bb(&adapter->hw);
 	adapter->i2c_adap.owner = THIS_MODULE;
 	adapter->i2c_algo = igb_i2c_algo;
 	adapter->i2c_algo.data = adapter;
@@ -3568,11 +3565,6 @@ static int igb_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 			adapter->ets = true;
 		else
 			adapter->ets = false;
-		/* Only enable I2C bit banging if an external thermal
-		 * sensor is supported.
-		 */
-		if (adapter->ets)
-			igb_set_i2c_bb(hw);
 		hw->mac.ops.init_thermal_sensor_thresh(hw);
 		if (igb_sysfs_init(adapter))
 			dev_err(&pdev->dev,
diff --git a/drivers/pinctrl/pinctrl-mcp23s08_spi.c b/drivers/pinctrl/pinctrl-mcp23s08_spi.c
index ea059b9c5542..d58c6e631942 100644
--- a/drivers/pinctrl/pinctrl-mcp23s08_spi.c
+++ b/drivers/pinctrl/pinctrl-mcp23s08_spi.c
@@ -8,6 +8,7 @@
 #include <linux/spi/spi.h>
 
 #include "pinctrl-mcp23s08.h"
+#include "../gpio/gpiolib.h"
 
 #define MCP_MAX_DEV_PER_CS	8
 
@@ -153,6 +154,10 @@ static int mcp23s08_probe(struct spi_device *spi)
 	int type;
 	int ret;
 	u32 v;
+	struct device_node *np;
+	int line_name_count;
+	const char **names;
+	int i;
 
 	match = device_get_match_data(dev);
 	if (match)
@@ -202,6 +207,43 @@ static int mcp23s08_probe(struct spi_device *spi)
 			return ret;
 
 		ngpio += data->mcp[addr]->chip.ngpio;
+
+		for_each_available_child_of_node(spi->dev.of_node, np) {
+			u32 chip_addr;
+			ret = of_property_read_u32(np, "address", &chip_addr);
+			if (ret)
+				continue;
+			if (chip_addr != addr)
+				continue;
+
+			line_name_count = fwnode_property_read_string_array(of_fwnode_handle(np), "gpio-line-names", NULL, 0);
+			if (line_name_count < 0)
+				continue;
+
+			if (line_name_count > data->mcp[addr]->chip.ngpio) {
+				dev_warn(&spi->dev, "gpio-line-names is length %d but should be at most length %d",
+					 line_name_count, data->mcp[addr]->chip.ngpio);
+				line_name_count = data->mcp[addr]->chip.ngpio;
+			}
+
+			names = kcalloc(line_name_count, sizeof(*names), GFP_KERNEL);
+			if (!names) {
+				dev_warn(&spi->dev, "cannot allocate gpio-line-names");
+				continue;
+			}
+
+			ret = fwnode_property_read_string_array(of_fwnode_handle(np), "gpio-line-names", names, line_name_count);
+			if (ret < 0) {
+				dev_warn(&spi->dev, "failed to read GPIO line names");
+				kfree(names);
+				continue;
+			}
+
+			for (i = 0; i < line_name_count; i++)
+				data->mcp[addr]->chip.gpiodev->descs[i].name = names[i];
+
+			kfree(names);
+		}
 	}
 	data->ngpio = ngpio;
 
diff --git a/drivers/spi/spi-orion.c b/drivers/spi/spi-orion.c
index 1f10f5c8e34d..25bde84af1cc 100644
--- a/drivers/spi/spi-orion.c
+++ b/drivers/spi/spi-orion.c
@@ -472,7 +472,7 @@ orion_spi_write_read(struct spi_device *spi, struct spi_transfer *xfer)
 	int cs = spi_get_chipselect(spi, 0);
 	void __iomem *vaddr;
 
-	word_len = spi->bits_per_word;
+	word_len = xfer->bits_per_word;
 	count = xfer->len;
 
 	orion_spi = spi_controller_get_devdata(spi->controller);
diff --git a/drivers/tty/serial/max310x.c b/drivers/tty/serial/max310x.c
index e339abff926d..65c98eeb3f05 100644
--- a/drivers/tty/serial/max310x.c
+++ b/drivers/tty/serial/max310x.c
@@ -27,9 +27,11 @@
 #include <linux/uaccess.h>
 
 #define MAX310X_NAME			"max310x"
+#define MAX310X_PORT_NAME_SUFFIX	"port"
 #define MAX310X_MAJOR			204
 #define MAX310X_MINOR			209
 #define MAX310X_UART_NRMAX		16
+#define MAX310X_MAX_PORTS		4 /* Maximum number of UART ports per IC. */
 
 /* MAX310X register definitions */
 #define MAX310X_RHR_REG			(0x00) /* RX FIFO */
@@ -1081,9 +1083,9 @@ static int max310x_startup(struct uart_port *port)
 	max310x_port_update(port, MAX310X_MODE1_REG,
 			    MAX310X_MODE1_TRNSCVCTRL_BIT, 0);
 
-	/* Configure MODE2 register & Reset FIFOs*/
-	val = MAX310X_MODE2_RXEMPTINV_BIT | MAX310X_MODE2_FIFORST_BIT;
-	max310x_port_write(port, MAX310X_MODE2_REG, val);
+	/* Reset FIFOs */
+	max310x_port_write(port, MAX310X_MODE2_REG,
+			   MAX310X_MODE2_FIFORST_BIT);
 	max310x_port_update(port, MAX310X_MODE2_REG,
 			    MAX310X_MODE2_FIFORST_BIT, 0);
 
@@ -1111,8 +1113,27 @@ static int max310x_startup(struct uart_port *port)
 	/* Clear IRQ status register */
 	max310x_port_read(port, MAX310X_IRQSTS_REG);
 
-	/* Enable RX, TX, CTS change interrupts */
-	val = MAX310X_IRQ_RXEMPTY_BIT | MAX310X_IRQ_TXEMPTY_BIT;
+	/*
+	 * Let's ask for an interrupt after a timeout equivalent to
+	 * the receiving time of 4 characters after the last character
+	 * has been received.
+	 */
+	max310x_port_write(port, MAX310X_RXTO_REG, 4);
+
+	/*
+	 * Make sure we also get RX interrupts when the RX FIFO is
+	 * filling up quickly, so get an interrupt when half of the RX
+	 * FIFO has been filled in.
+	 */
+	max310x_port_write(port, MAX310X_FIFOTRIGLVL_REG,
+			   MAX310X_FIFOTRIGLVL_RX(MAX310X_FIFO_SIZE / 2));
+
+	/* Enable RX timeout interrupt in LSR */
+	max310x_port_write(port, MAX310X_LSR_IRQEN_REG,
+			   MAX310X_LSR_RXTO_BIT);
+
+	/* Enable LSR, RX FIFO trigger, CTS change interrupts */
+	val = MAX310X_IRQ_LSR_BIT  | MAX310X_IRQ_RXFIFO_BIT | MAX310X_IRQ_TXEMPTY_BIT;
 	max310x_port_write(port, MAX310X_IRQEN_REG, val | MAX310X_IRQ_CTS_BIT);
 
 	return 0;
@@ -1518,6 +1539,15 @@ static struct regmap_config regcfg = {
 	.max_raw_write = MAX310X_FIFO_SIZE,
 };
 
+static const char *max310x_regmap_name(unsigned int port_id)
+{
+	static char buf[sizeof(MAX310X_PORT_NAME_SUFFIX __stringify(MAX310X_MAX_PORTS))];
+
+	snprintf(buf, sizeof(buf), MAX310X_PORT_NAME_SUFFIX "%u", port_id);
+
+	return buf;
+}
+
 #ifdef CONFIG_SPI_MASTER
 static int max310x_spi_extended_reg_enable(struct device *dev, bool enable)
 {
@@ -1535,7 +1565,7 @@ static const struct max310x_if_cfg __maybe_unused max310x_spi_if_cfg = {
 static int max310x_spi_probe(struct spi_device *spi)
 {
 	const struct max310x_devtype *devtype;
-	struct regmap *regmaps[4];
+	struct regmap *regmaps[MAX310X_MAX_PORTS];
 	unsigned int i;
 	int ret;
 
@@ -1553,6 +1583,8 @@ static int max310x_spi_probe(struct spi_device *spi)
 
 	for (i = 0; i < devtype->nr; i++) {
 		u8 port_mask = i * 0x20;
+
+		regcfg.name = max310x_regmap_name(i);
 		regcfg.read_flag_mask = port_mask;
 		regcfg.write_flag_mask = port_mask | MAX310X_WRITE_BIT;
 		regmaps[i] = devm_regmap_init_spi(spi, &regcfg);
@@ -1637,7 +1669,7 @@ static int max310x_i2c_probe(struct i2c_client *client)
 {
 	const struct max310x_devtype *devtype;
 	struct i2c_client *port_client;
-	struct regmap *regmaps[4];
+	struct regmap *regmaps[MAX310X_MAX_PORTS];
 	unsigned int i;
 	u8 port_addr;
 
@@ -1652,6 +1684,7 @@ static int max310x_i2c_probe(struct i2c_client *client)
 				     client->addr, devtype->slave_addr.min,
 				     devtype->slave_addr.max);
 
+	regcfg_i2c.name = max310x_regmap_name(0);
 	regmaps[0] = devm_regmap_init_i2c(client, &regcfg_i2c);
 
 	for (i = 1; i < devtype->nr; i++) {
@@ -1660,6 +1693,7 @@ static int max310x_i2c_probe(struct i2c_client *client)
 							client->adapter,
 							port_addr);
 
+		regcfg_i2c.name = max310x_regmap_name(i);
 		regmaps[i] = devm_regmap_init_i2c(port_client, &regcfg_i2c);
 	}
 
