From 3046b0480e86b348c04d830121ccbe59e3b5a877 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tom=C3=A1=C5=A1=20Pecka?= <tomas.pecka@cesnet.cz>
Date: Thu, 9 Sep 2021 09:19:05 +0200
Subject: [PATCH 4/7] varlink: Implement varlink_observe_complete

In some cases one doesn't want to run the sd_event loop just to obtain
results from varlink replies in the "continues" mode.

The new function (`varlink_observe_complete`) runs the varlink process
mode on the client side synchronously and returns when no more replies
are expected.
This is similar to the behavior seen in the `varlink_call` function.
---
 src/shared/varlink.c    | 31 ++++++++++++++++++++++++
 src/shared/varlink.h    |  1 +
 src/test/test-varlink.c | 52 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 84 insertions(+)

diff --git a/src/shared/varlink.c b/src/shared/varlink.c
index 97f50a5ed2..59a1ce1588 100644
--- a/src/shared/varlink.c
+++ b/src/shared/varlink.c
@@ -1729,6 +1729,37 @@ int varlink_observeb(Varlink *v, const char *method, ...) {
         return varlink_observe(v, method, parameters);
 }
 
+int varlink_observe_complete(Varlink *v) {
+        int r;
+
+        while (v->state == VARLINK_AWAITING_REPLY_MORE) {
+                r = varlink_process(v);
+                if (r < 0)
+                        return r;
+                if (r > 0)
+                        continue;
+
+                r = varlink_wait(v, USEC_INFINITY);
+                if (r < 0)
+                        return r;
+        }
+
+        switch (v->state) {
+        case VARLINK_IDLE_CLIENT:
+                return 1;
+
+        case VARLINK_PENDING_DISCONNECT:
+        case VARLINK_DISCONNECTED:
+                return varlink_log_errno(v, SYNTHETIC_ERRNO(ECONNRESET), "Connection was closed.");
+
+        case VARLINK_PENDING_TIMEOUT:
+                return varlink_log_errno(v, SYNTHETIC_ERRNO(ETIME), "Connection timed out.");
+
+        default:
+                assert_not_reached();
+        }
+}
+
 int varlink_call(
                 Varlink *v,
                 const char *method,
diff --git a/src/shared/varlink.h b/src/shared/varlink.h
index 0984222c96..c4a6680b94 100644
--- a/src/shared/varlink.h
+++ b/src/shared/varlink.h
@@ -92,6 +92,7 @@ int varlink_invokeb(Varlink *v, const char *method, ...);
 /* Enqueue method call, expect a reply now, and possibly more later, which are all delivered to the reply callback */
 int varlink_observe(Varlink *v, const char *method, JsonVariant *parameters);
 int varlink_observeb(Varlink *v, const char *method, ...);
+int varlink_observe_complete(Varlink *v);
 
 /* Enqueue a final reply */
 int varlink_reply(Varlink *v, JsonVariant *parameters);
diff --git a/src/test/test-varlink.c b/src/test/test-varlink.c
index 631305e8f0..acd7ec1a73 100644
--- a/src/test/test-varlink.c
+++ b/src/test/test-varlink.c
@@ -22,6 +22,7 @@
 #define OVERLOAD_CONNECTIONS 333
 
 static int n_done = 0;
+static int n_observe = 0;
 static int block_write_fd = -EBADF;
 
 static int method_something(Varlink *link, JsonVariant *parameters, VarlinkMethodFlags flags, void *userdata) {
@@ -49,6 +50,29 @@ static int method_something(Varlink *link, JsonVariant *parameters, VarlinkMetho
         return varlink_reply(link, ret);
 }
 
+static int method_notify(Varlink *link, JsonVariant *parameters, VarlinkMethodFlags flags, void *userdata) {
+        int r, i;
+        _cleanup_(json_variant_unrefp) JsonVariant *last = NULL;
+
+        for (i = 0; i < 5; i++) {
+                _cleanup_(json_variant_unrefp) JsonVariant *v = NULL;
+
+                r = json_build(&v, JSON_BUILD_OBJECT(JSON_BUILD_PAIR("i", JSON_BUILD_INTEGER(i))));
+                if (r < 0)
+                        return r;
+
+                r = varlink_notify(link, v);
+                if (r < 0)
+                        return r;
+        }
+
+        r = json_build(&last, JSON_BUILD_OBJECT(JSON_BUILD_PAIR("i", JSON_BUILD_INTEGER(i))));
+        if (r < 0)
+                return r;
+
+        return varlink_reply(link, last);
+}
+
 static void test_fd(int fd, const void *buf, size_t n) {
         char rbuf[n + 1];
         ssize_t m;
@@ -123,6 +147,18 @@ static int reply(Varlink *link, JsonVariant *parameters, const char *error_id, V
         return 0;
 }
 
+static int reply_notify(Varlink *link, JsonVariant *parameters, const char *error_id, VarlinkReplyFlags flags, void *userdata) {
+        JsonVariant *v;
+        int val;
+
+        v = json_variant_by_key(parameters, "i");
+        val = json_variant_integer(v);
+
+        assert_se(n_observe++ == val);
+
+        return 0;
+}
+
 static int on_connect(VarlinkServer *s, Varlink *link, void *userdata) {
         uid_t uid = UID_INVALID;
 
@@ -149,6 +185,20 @@ static int overload_reply(Varlink *link, JsonVariant *parameters, const char *er
         return 0;
 }
 
+static void observe_sync_test(const char *address) {
+        _cleanup_(varlink_flush_close_unrefp) Varlink *c = NULL;
+
+        log_debug("observe synchronously");
+
+        assert_se(varlink_connect_address(&c, address) >= 0);
+        assert_se(varlink_set_description(c, "observe-client") >= 0);
+        assert_se(varlink_bind_reply(c, reply_notify) >= 0);
+
+        assert_se(varlink_observe(c, "io.test.Notify", NULL) >= 0);
+        assert_se(varlink_observe_complete(c) >= 0);
+        assert_se(n_observe == 6);
+}
+
 static void flood_test(const char *address) {
         _cleanup_(varlink_flush_close_unrefp) Varlink *c = NULL;
         _cleanup_(sd_event_unrefp) sd_event *e = NULL;
@@ -241,6 +291,7 @@ static void *thread(void *arg) {
         assert_se(streq_ptr(json_variant_string(json_variant_by_key(o, "method")), "io.test.IDontExist"));
         assert_se(streq(e, VARLINK_ERROR_METHOD_NOT_FOUND));
 
+        observe_sync_test(arg);
         flood_test(arg);
 
         assert_se(varlink_send(c, "io.test.Done", NULL) >= 0);
@@ -292,6 +343,7 @@ int main(int argc, char *argv[]) {
         assert_se(varlink_server_new(&s, VARLINK_SERVER_ACCOUNT_UID) >= 0);
         assert_se(varlink_server_set_description(s, "our-server") >= 0);
 
+        assert_se(varlink_server_bind_method(s, "io.test.Notify", method_notify) >= 0);
         assert_se(varlink_server_bind_method(s, "io.test.PassFD", method_passfd) >= 0);
         assert_se(varlink_server_bind_method(s, "io.test.DoSomething", method_something) >= 0);
         assert_se(varlink_server_bind_method(s, "io.test.Done", method_done) >= 0);
-- 
2.42.0

